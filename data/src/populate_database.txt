-- SQL Commands for Database Population and Optimization
-- Extracted from processing.ipynb


-- Remove duplicates from tables
CREATE TABLE borough_lut_temp AS
SELECT DISTINCT * FROM borough_lut;
DROP TABLE borough_lut;
ALTER TABLE borough_lut_temp RENAME TO borough_lut;

CREATE TABLE contributing_factor_lut_temp AS
SELECT DISTINCT * FROM contributing_factor_lut;
DROP TABLE contributing_factor_lut;
ALTER TABLE contributing_factor_lut_temp RENAME TO contributing_factor_lut;

CREATE TABLE cross_street_lut_temp AS
SELECT DISTINCT * FROM cross_street_lut;
DROP TABLE cross_street_lut;
ALTER TABLE cross_street_lut_temp RENAME TO cross_street_lut;

CREATE TABLE off_street_lut_temp AS
SELECT DISTINCT * FROM off_street_lut;
DROP TABLE off_street_lut;
ALTER TABLE off_street_lut_temp RENAME TO off_street_lut;


DELETE FROM collisions_df
WHERE ctid NOT IN (
    SELECT MIN(ctid)
    FROM collisions_df
    GROUP BY collision_id
);

DELETE FROM nyc_geometry_df
WHERE ctid NOT IN (
    SELECT MIN(ctid)
    FROM nyc_geometry_df
    GROUP BY "LocationID"
);

-- Add primary keys to tables
ALTER TABLE borough_lut ADD PRIMARY KEY (borough_id);
ALTER TABLE contributing_factor_lut ADD PRIMARY KEY (contributing_factor_id);
ALTER TABLE cross_street_lut ADD PRIMARY KEY (cross_street_id);
ALTER TABLE off_street_lut ADD PRIMARY KEY (off_street_id);
ALTER TABLE collisions_df ADD PRIMARY KEY (collision_id);
ALTER TABLE nyc_geometry_df ADD PRIMARY KEY ("LocationID");
ALTER TABLE taxi ADD COLUMN trip_id SERIAL PRIMARY KEY;

-- Alter column types
ALTER TABLE collisions_df
ALTER COLUMN borough_id TYPE integer USING borough_id::integer;

ALTER TABLE collisions_df
ALTER COLUMN contributing_factor_vehicle_1_id TYPE integer USING contributing_factor_vehicle_1_id::integer;

ALTER TABLE collisions_df
ALTER COLUMN cross_street_name_id TYPE integer USING cross_street_name_id::integer;

ALTER TABLE collisions_df
ALTER COLUMN off_street_name_id TYPE integer USING off_street_name_id::integer;


-- Rename tables
ALTER TABLE collisions_df RENAME TO collision;
ALTER TABLE taxi_df RENAME TO taxi;
ALTER TABLE geometry_df RENAME TO nyc_geometry;

-- Rename columns
ALTER TABLE nyc_geometry RENAME COLUMN "LocationID" TO location_id;
ALTER TABLE nyc_geometry RENAME COLUMN "Shape_Leng" TO shape_leng;
ALTER TABLE nyc_geometry RENAME COLUMN "Shape_Area" TO shape_area;
ALTER TABLE nyc_geometry RENAME COLUMN "OBJECTID" TO object_id;

ALTER TABLE taxi RENAME COLUMN "VendorID" TO vendor_id;
ALTER TABLE taxi RENAME COLUMN "RatecodeID" TO ratecode_id;
ALTER TABLE taxi RENAME COLUMN "PULocationID" TO pu_location_id;
ALTER TABLE taxi RENAME COLUMN "DOLocationID" TO do_location_id;
ALTER TABLE taxi RENAME COLUMN "Airport_fee" TO airport_fee;


-- Add foreign key constraints
ALTER TABLE taxi
ADD CONSTRAINT fk_taxi_pickup_location
FOREIGN KEY (pu_location_id)
REFERENCES nyc_geometry (location_id)
NOT VALID;

ALTER TABLE taxi
ADD CONSTRAINT fk_taxi_dropoff_location
FOREIGN KEY (do_location_id)
REFERENCES nyc_geometry (location_id)
NOT VALID;

ALTER TABLE collision
ADD CONSTRAINT fk_collision_borough
FOREIGN KEY (borough_id)
REFERENCES borough_lut (borough_id);

ALTER TABLE collision
ADD CONSTRAINT fk_collision_contributing_factor
FOREIGN KEY (contributing_factor_id)
REFERENCES contributing_factor_lut (contributing_factor_id);

ALTER TABLE collision
ADD CONSTRAINT fk_collision_cross_street
FOREIGN KEY (cross_street_id)
REFERENCES cross_street_lut (cross_street_id);

ALTER TABLE collision
ADD CONSTRAINT fk_collision_off_street
FOREIGN KEY (off_street_id)
REFERENCES off_street_lut (off_street_id);

-- Update borough names to proper case
UPDATE borough_lut
SET borough = INITCAP(borough);

---- connect borough to nyc_geometry like make nyc_geometry have fk to borough_lut
SELECT DISTINCT g.borough
FROM nyc_geometry g
LEFT JOIN borough_lut b ON g.borough = b.borough
WHERE b.borough IS NULL;

SELECT MAX(borough_id) FROM borough_lut;

INSERT INTO borough_lut (borough_id, borough)
VALUES (6, 'EWR');  -- use next available ID


ALTER TABLE nyc_geometry ADD COLUMN borough_id INT;
ALTER TABLE nyc_geometry
ADD CONSTRAINT fk_geometry_borough
FOREIGN KEY (borough_id) REFERENCES borough_lut(borough_id);


ALTER TABLE nyc_geometry DROP COLUMN borough;



-- SHP checking if point is inside longitude and latitude

ALTER TABLE geometry_shp
ALTER COLUMN geometry_hex
TYPE geometry(MULTIPOLYGON, 2263)
USING ST_SetSRID(geometry, 2263);

SELECT zone
FROM nyc_geometry
WHERE ST_Contains(
  geometry,
  ST_Transform(
    ST_SetSRID(ST_MakePoint(-73.935242, 40.730610), 4326),
    2263
  )
);


ST_Contains(polygon, transformed_point)
