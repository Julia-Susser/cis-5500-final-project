
-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_geometry_location_id ON nyc_geometry(location_id);
CREATE INDEX IF NOT EXISTS idx_geometry_borough ON nyc_geometry(borough);
CREATE INDEX IF NOT EXISTS idx_geometry_zone ON nyc_geometry(zone);

CREATE INDEX IF NOT EXISTS idx_taxi_pu_location_id ON taxi(pu_location_id);
CREATE INDEX IF NOT EXISTS idx_taxi_do_location_id ON taxi(do_location_id);
CREATE INDEX IF NOT EXISTS idx_taxi_tpep_pickup_datetime ON taxi(tpep_pickup_datetime);
CREATE INDEX IF NOT EXISTS idx_taxi_fare_amount ON taxi(fare_amount);
CREATE INDEX IF NOT EXISTS idx_taxi_trip_distance ON taxi(trip_distance);
CREATE INDEX IF NOT EXISTS idx_taxi_tip_amount ON taxi(tip_amount);

CREATE INDEX IF NOT EXISTS idx_collision_borough_id ON collision(borough_id);
CREATE INDEX IF NOT EXISTS idx_collision_crash_date ON collision(crash_date);
CREATE INDEX IF NOT EXISTS idx_collision_crash_time ON collision(crash_time);
CREATE INDEX IF NOT EXISTS idx_collision_number_of_persons_injured ON collision(number_of_persons_injured);

CREATE INDEX IF NOT EXISTS idx_borough_lut_borough_id ON borough_lut(borough_id);
CREATE INDEX IF NOT EXISTS idx_borough_lut_borough ON borough_lut(borough);

-- Create composite indexes for common join patterns
CREATE INDEX IF NOT EXISTS idx_taxi_pu_do_location ON taxi(pu_location_id, do_location_id);
CREATE INDEX IF NOT EXISTS idx_collision_date_time ON collision(crash_date, crash_time);

-- Create specialized indexes for complex queries
CREATE INDEX IF NOT EXISTS idx_collision_borough_injuries ON collision(borough_id, number_of_persons_injured);
CREATE INDEX IF NOT EXISTS idx_taxi_location_count ON taxi(pu_location_id, do_location_id);
CREATE INDEX IF NOT EXISTS idx_taxi_fare_location ON taxi(fare_amount, pu_location_id);
CREATE INDEX IF NOT EXISTS idx_taxi_tip_location ON taxi(tip_amount, pu_location_id);
CREATE INDEX IF NOT EXISTS idx_collision_location_count ON collision(borough_id, crash_date);

-- Create partial indexes for common filtering conditions
CREATE INDEX IF NOT EXISTS idx_taxi_high_fare ON taxi(pu_location_id, fare_amount) 
WHERE fare_amount > 50;

CREATE INDEX IF NOT EXISTS idx_taxi_high_tip ON taxi(pu_location_id, tip_amount) 
WHERE tip_amount > 10;

CREATE INDEX IF NOT EXISTS idx_collision_recent ON collision(borough_id, crash_date) 
WHERE crash_date > NOW() - INTERVAL '1 year';

-- Create materialized views for complex, frequently accessed data
CREATE MATERIALIZED VIEW IF NOT EXISTS mv_location_safety AS
SELECT 
  g.location_id, 
  g.zone, 
  g.borough,
  COUNT(c.*) AS collision_count,
  COALESCE(SUM(c.number_of_persons_injured), 0) AS total_injuries
FROM nyc_geometry g
LEFT JOIN collision c ON c.borough_id = (
  SELECT borough_id FROM borough_lut WHERE borough = g.borough
)
GROUP BY g.location_id, g.zone, g.borough;

CREATE UNIQUE INDEX IF NOT EXISTS idx_mv_location_safety_id ON mv_location_safety(location_id);

CREATE MATERIALIZED VIEW IF NOT EXISTS mv_location_taxi_activity AS
SELECT 
  g.location_id,
  g.zone,
  g.borough,
  COUNT(CASE WHEN t.pu_location_id = g.location_id THEN 1 END) AS pickup_count,
  COUNT(CASE WHEN t.do_location_id = g.location_id THEN 1 END) AS dropoff_count,
  AVG(t.fare_amount) AS avg_fare,
  AVG(t.trip_distance) AS avg_distance,
  AVG(t.tip_amount) AS avg_tip
FROM nyc_geometry g
LEFT JOIN taxi t ON t.pu_location_id = g.location_id OR t.do_location_id = g.location_id
GROUP BY g.location_id, g.zone, g.borough;

CREATE UNIQUE INDEX IF NOT EXISTS idx_mv_location_taxi_activity_id ON mv_location_taxi_activity(location_id);

-- Refresh materialized views
REFRESH MATERIALIZED VIEW CONCURRENTLY mv_location_safety;
REFRESH MATERIALIZED VIEW CONCURRENTLY mv_location_taxi_activity; 